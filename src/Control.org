* Controller
:PROPERTIES:
:header-args: :tangle ./Control.hs :comments both
:END:

This module is responsible for registering actions that change the state of the module. 

This module communicates to the Text en Graph part by sending the currently selected node and whether or not the underlying database has been updated.
The currently selected node is always interesting for the other parts, the update might or might not change the the neighbouring GUI elements.

#+begin_src haskell
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecursiveDo #-}

module Control (
  controlView
)
where

import qualified Data.Text as T
import Graphics.UI.Threepenny
import Debug

data Operations = ADD T.Text | RM T.Text deriving Show

data AddRemoveForm = ARF {elemARF :: Element, ev :: Event Operations}

mkAddRemove :: T.Text -> UI AddRemoveForm
mkAddRemove title = mdo 
                         f <- new # set class_ "addremove"
                         header <- string (T.unpack title)

                         add <- button # set text "add" 
                         remove <- button # set text "remove" 

                         uinput <- entry binput
                         let einput = rumors $ userText uinput
                         binput <- stepper "" einput 

                         let eoutput = head <$> unions [ADD <$> T.pack <$> binput <@ click add, RM <$> T.pack <$> binput <@ click remove]

                         lastAction <- stepper "" (show <$> eoutput)
                         
                         db <- debugString "Nothing"
                         sink text lastAction (element db)

                         element f #+ [element header, element uinput, element add, element remove, element db]
                         return (ARF f eoutput)

instance Widget AddRemoveForm where
  getElement = elemARF

controlView :: UI Element
controlView = do regular <- mkAddRemove "regular"
                 parent <- mkAddRemove "parent"
                 child <- mkAddRemove "child"
                 relation <- mkAddRemove "relation"
                 new #+ [element regular, element parent, element child, element relation]
#+end_src
