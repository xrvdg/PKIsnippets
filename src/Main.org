Deze demonstratie app gaat om het schrijven van threepenny layer voor de film app.
Als dat eenmaal wat werkt moet het omschrijven naar een knowledge graph niet veel moeilijker zijn.

Dit wordt vooral gedaan doordat we nu veel en gestructureerde data hebben. Interactie hiermee maakt onze eigen model wellicht makkelijker.

Het andere experiment wat hiermee wordt aangegaan is vanaf het begin programmeren in literate style.


* Imports 
#+begin_src haskell :tangle ./Main.hs :comments both
{-# LANGUAGE OverloadedStrings #-}
module Main where
import Data.Default
import qualified Database.Bolt as B
import Graphics.UI.Threepenny as GUT
import qualified Data.Text as T
import Control.Monad 
import Data.Aeson
import qualified Data.ByteString.Lazy.Char8 as BS
import Data.Monoid ((<>))
#+end_src 

* Neo4j

#+begin_src haskell :tangle ./Main.hs :comments both
doquery :: IO ()
doquery = do
  pipe <- B.connect $ def {B.user="neo4j", B.password="pki2018"}
  let q = B.query "match (movie:Movie) return movie limit 4;"
  res <- B.run pipe q
  print res
  let first = head res
  bla <- first `B.at` "movie" >>= B.exact :: IO B.Node
  print bla
#+end_src

* GUI
:PROPERTIES:
:header-args: :tangle ./Main.hs :comments both
:END:

#+begin_src haskell 
  main :: IO ()
  main = do 
    BS.writeFile "henk.json" (encode testSG)
    startGUI defaultConfig {jsStatic = Just ".", jsPort = Just 8200} setup

  setup :: Window -> UI ()
  setup w = void $ do
    return w # set title "test neo4j"
    graph <- GUT.div # set id_ "sg" # set style [("margin", "auto")] # set html "<script>var s = new sigma('sg');</script>"
    s <- string "Hello world"
    b <- button # set text "Appear"
    
    let js = BS.unpack $ encode testSG
    let command = ("s.graph.clear();\n" <>
                   "s.graph.read(" ++ js ++ ");\n" <>
                   "s.refresh();")

    on click b (\a -> runFunction $ ffi command)
  
    sgm <- mkElement "script" # set (attr "src") "/static/sigma.js/build/sigma.min.js"
    sp <- mkElement "script" # set (attr "src") "/static/sigma.js/build/plugins/sigma.parsers.json.min.js"
    

    st <- mkElement "style" # set (attr "type") "text/css" # set html  "#sg {max-width: 400px; height: 400px; margin: auto;}"
    getBody w #+ [element s, element sgm, element sp, element graph, element b]
    getHead w #+ [element st]
    return ()

#+end_src

sigma moet maar een keer worden aangeroepen anders wordt er steeds weer een canvas aan de div toegevoegd.
De clear is waarschijnlijk ook nodig doordat alle parser die read gebruiken dit er ook bij hebben.

* Datastructures
:PROPERTIES:
:header-args: :tangle ./Main.hs :comments both
:END:

#+begin_src haskell
data Movie = Movie {tit :: T.Text, released :: Int}
data Person = Person {name :: T.Text, born :: Int}
#+end_src

Het is mogelijk voor een node om meerdere labels te hebben. Nu gebruik ik labels als zekerheid dat ze bepaalde data hebben.
Weet niet zeker hoe verstandig dat is.

Zijn labels ieders aparte dingen zoals nu, of is het beter om het te modelleren als de ADT en dat een node meerdere van deze labels kan hebben.

Dat gebeurt echter ook wel als we aan de hasbolt interface blijven zitten. Het huidige is misschien beter om de data te transformeren.

** sigma.js
We maken een data structuur voor sigma.js die we eenvoudig van en naar JSON kunnen maken.
Hoewel we waarschijnlijk ongerichte grafen blijven tekenen, kent sigmajs wel source and target id en wij hanteren het ook om tijdens het coden consistent te blijven.

#+begin_src haskell
data SG = SG [SNode] [SEdge]

type ID = Int
type Label = T.Text

type SourceID = ID
type TargetID = ID

data SNode = SN ID Label
data SEdge = SE ID SourceID TargetID

instance ToJSON SG where
  toJSON (SG n e) = object ["nodes" .= toJSON n, "edges" .= toJSON e]

instance ToJSON SEdge where
  toJSON (SE id source target) = object ["id" .= id, "source" .= source, "target" .= target]

instance ToJSON SNode where
  toJSON (SN id label) = object ["id" .= id, "label" .= label, "x" .= (20 :: Int), "y" .= (30 :: Int), "size" .= (10 :: Int)]
#+end_src

De nodes hebben wel echt een positie nodig anders worden ze niet getekend.
Het maken van een node moet pas gebeuren wanneer de browser geheel is geladen.
De browser merkt het laden van extra script niet helemaal op.

In het voorbeeld op de site maken ze gebruik van aparte identifiers voor edges en nodes. We hanteren eerst Ints en zien wel of we ze ook op dit level moeten onderscheiden.

#+begin_src haskell
testSG :: SG
testSG = SG [SN 1 "Henk", SN 2 "Frits", SN 3 "Barend"] [SE 1 1 2]
#+end_src



















